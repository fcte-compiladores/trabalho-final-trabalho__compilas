?start         : program

program        : declaration*

?declaration   : var_def 
               | function
               | stmt

var_def        : TYPE VAR ("=" expr)? ";"

function       : TYPE VAR "(" fun_params ")" block

fun_params     : [TYPE VAR ( "," TYPE VAR )*]

?stmt          : expr ";"
               | return_stmt
               | print_cmd
               | if_cmd
               | for_cmd
               | while_cmd
               | break_cmd         -> break_cmd
               | block

return_stmt    : RETURN expr? ";"        -> return_cmd
print_cmd      : PRINT "(" expr ")" ";"  -> print_cmd
if_cmd         : IF "(" expr ")" stmt ["else" stmt]
for_cmd        : FOR "(" for_args ")" stmt
while_cmd      : WHILE "(" expr ")" stmt
break_cmd      : BREAK ";"              -> break_cmd

for_args       : (var_def | expr? ";") expr? ";" expr?

block          : "{" declaration* "}"

?expr          : unary
               | expr "=" expr             -> assign
               | expr "||" expr            -> or_
               | expr "&&" expr            -> and_
               | expr "==" expr            -> eq
               | expr "!=" expr            -> ne
               | expr "<" expr             -> lt
               | expr ">" expr             -> gt
               | expr "<=" expr            -> le
               | expr ">=" expr            -> ge
               | expr "+" expr             -> add
               | expr "-" expr             -> sub
               | expr "*" expr             -> mul
               | expr "/" expr             -> div

?unary         : MINUS unary              -> unary
               | NOT unary                -> unary
               | call
               | atom

?call          : atom "(" params ")"      -> call

?atom          : NUMBER 
               | BOOL
               | VAR
               | STRING
               | VOID
               | "(" expr ")"

params         : [ expr ("," expr)* ]

EQUAL          : "="
MINUS          : "-"
NOT            : "!"
RETURN.2       : "return"
IF.2           : "if"
ELSE.2         : "else"
FOR.2          : "for"
WHILE.2        : "while"
BREAK.2        : "break"
PRINT.2        : "printf"
BOOL.2         : "true" | "false"
TYPE.3         : "int" | "char"
VOID.3         : "void"
VAR.1          : /[a-z_A-Z]\w*/
NUMBER         : /([1-9][0-9]*|0)(\.[0-9]+)?/
STRING         : /"[^"]*"/
COMMENT        : "//" /[^\n]*/

%ignore        /\s/ | COMMENT
